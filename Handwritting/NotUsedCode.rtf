{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red108\green121\blue134;\red31\green31\blue36;\red255\green255\blue255;
\red252\green95\blue163;\red93\green216\blue255;\red65\green161\blue192;\red158\green241\blue221;\red208\green168\blue255;
\red208\green168\blue255;\red103\green183\blue164;\red161\green103\blue230;\red208\green191\blue105;\red161\green103\blue230;
\red103\green183\blue164;\red146\green161\blue177;\red158\green241\blue221;\red252\green106\blue93;}
{\*\expandedcolortbl;;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c62145\c94386\c86819;\csgenericrgb\c81569\c65882\c100000;
\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c63137\c40392\c90196;
\csgenericrgb\c40392\c71765\c64314;\csgenericrgb\c57255\c63137\c69412;\csgenericrgb\c61961\c94510\c86667;\csgenericrgb\c98912\c41558\c36568;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 //\cf4 \
\cf2 //  DropDownMenu.swift\cf4 \
\cf2 //  Handwritting\cf4 \
\cf2 //\cf4 \
\cf2 //  Created by Felix Haag on 10.08.21.\cf4 \
\cf2 //\cf4 \
\

\f1\b \cf5 import
\f0\b0 \cf4  UIKit\
\

\f1\b \cf5 protocol
\f0\b0 \cf4  \cf6 dropDownDelegate\cf4  \{\
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 dropDownItemPressed\cf4 (selectedOption: \cf8 ProjectType\cf4 )\
\}\
\

\f1\b \cf5 class
\f0\b0 \cf4  \cf6 dropDownView\cf4 : \cf9 UIView\cf4 , \cf10 UITableViewDelegate\cf4 , \cf10 UITableViewDataSource\cf4  \{\
    \
    
\f1\b \cf5 var
\f0\b0 \cf4  \cf7 dropDownOptions\cf4 : [(\cf9 UIImage\cf4 , \cf10 String\cf4 )]\
    \
    
\f1\b \cf5 var
\f0\b0 \cf4  \cf7 tableView\cf4  = \cf9 UITableView\cf4 ()\
    \
    
\f1\b \cf5 var
\f0\b0 \cf4  \cf7 dDDelegate\cf4 : \cf8 dropDownDelegate\cf4 !\
        \
    
\f1\b \cf5 init
\f0\b0 \cf4 (frame: \cf10 CGRect\cf4 , dropDownOptions: [(\cf9 UIImage\cf4 , \cf10 String\cf4 )]) \{\
        
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 dropDownOptions\cf4  = dropDownOptions\
        
\f1\b \cf5 super
\f0\b0 \cf4 .\cf9 init\cf4 (frame: frame)\
        \
        \
        \cf11 tableView\cf4 .\cf12 delegate\cf4  = 
\f1\b \cf5 self
\f0\b0 \cf4 \
        \cf11 tableView\cf4 .\cf12 dataSource\cf4  = 
\f1\b \cf5 self
\f0\b0 \cf4 \
        \
        \cf11 tableView\cf4 .\cf12 translatesAutoresizingMaskIntoConstraints\cf4  = 
\f1\b \cf5 false
\f0\b0 \cf4 \
        \cf11 tableView\cf4 .\cf12 backgroundColor\cf4  = \cf9 UIColor\cf4 .\cf12 lightGray\cf4 \
        \
        
\f1\b \cf5 self
\f0\b0 \cf4 .\cf12 backgroundColor\cf4  = \cf9 UIColor\cf4 .\cf12 lightGray\cf4 \
        
\f1\b \cf5 self
\f0\b0 \cf4 .\cf12 layer\cf4 .\cf12 cornerRadius\cf4  = \cf13 15\cf4 \
        
\f1\b \cf5 self
\f0\b0 \cf4 .\cf12 clipsToBounds\cf4  = 
\f1\b \cf5 true
\f0\b0 \cf4 \
        \
        
\f1\b \cf5 self
\f0\b0 \cf4 .\cf14 addSubview\cf4 (\cf11 tableView\cf4 )\
        \
        \cf11 tableView\cf4 .\cf12 leftAnchor\cf4 .\cf14 constraint\cf4 (equalTo: 
\f1\b \cf5 self
\f0\b0 \cf4 .\cf12 leftAnchor\cf4 ).\cf12 isActive\cf4  = 
\f1\b \cf5 true
\f0\b0 \cf4 \
        \cf11 tableView\cf4 .\cf12 rightAnchor\cf4 .\cf14 constraint\cf4 (equalTo: 
\f1\b \cf5 self
\f0\b0 \cf4 .\cf12 rightAnchor\cf4 ).\cf12 isActive\cf4  = 
\f1\b \cf5 true
\f0\b0 \cf4 \
        \cf11 tableView\cf4 .\cf12 topAnchor\cf4 .\cf14 constraint\cf4 (equalTo: 
\f1\b \cf5 self
\f0\b0 \cf4 .\cf12 topAnchor\cf4 ).\cf12 isActive\cf4  = 
\f1\b \cf5 true
\f0\b0 \cf4 \
        \cf11 tableView\cf4 .\cf12 bottomAnchor\cf4 .\cf14 constraint\cf4 (equalTo: 
\f1\b \cf5 self
\f0\b0 \cf4 .\cf12 bottomAnchor\cf4 ).\cf12 isActive\cf4  = 
\f1\b \cf5 true
\f0\b0 \cf4 \
        \
        \cf11 tableView\cf4 .\cf12 isScrollEnabled\cf4  = 
\f1\b \cf5 false
\f0\b0 \cf4 \
    \}\
    \
    
\f1\b \cf5 required
\f0\b0 \cf4  
\f1\b \cf5 init
\f0\b0 \cf4 ?(coder aDecoder: \cf9 NSCoder\cf4 ) \{\
        
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 dropDownOptions\cf4  = [(\cf9 UIImage\cf4 , \cf10 String\cf4 )]()\
        
\f1\b \cf5 super
\f0\b0 \cf4 .\cf9 init\cf4 (coder: aDecoder)\
    \}\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 tableView\cf4 (
\f1\b \cf5 _
\f0\b0 \cf4  tableView: \cf9 UITableView\cf4 , numberOfRowsInSection section: \cf10 Int\cf4 ) -> \cf10 Int\cf4  \{\
        
\f1\b \cf5 return
\f0\b0 \cf4  \cf11 dropDownOptions\cf4 .\cf12 count\cf4 \
    \}\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 tableView\cf4 (
\f1\b \cf5 _
\f0\b0 \cf4  tableView: \cf9 UITableView\cf4 , cellForRowAt indexPath: \cf10 IndexPath\cf4 ) -> \cf9 UITableViewCell\cf4  \{\
        
\f1\b \cf5 let
\f0\b0 \cf4  cell = \cf9 UITableViewCell\cf4 ()\
                \
        cell.\cf12 imageView\cf4 ?.\cf12 image\cf4  = \cf11 dropDownOptions\cf4 [indexPath.\cf12 row\cf4 ].\cf13 0\cf4 \
        cell.\cf12 textLabel\cf4 ?.\cf12 text\cf4  = \cf11 dropDownOptions\cf4 [indexPath.\cf12 row\cf4 ].\cf13 1\cf4 \
        cell.\cf12 textLabel\cf4 ?.\cf12 textColor\cf4  = \cf9 UIColor\cf4 .\cf12 systemBlue\cf4 \
        cell.\cf12 backgroundColor\cf4  = \cf9 UIColor\cf4 .\cf12 lightGray\cf4 \
        \
        
\f1\b \cf5 return
\f0\b0 \cf4  cell\
    \}\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 tableView\cf4 (
\f1\b \cf5 _
\f0\b0 \cf4  tableView: \cf9 UITableView\cf4 , didSelectRowAt indexPath: \cf10 IndexPath\cf4 ) \{\
        
\f1\b \cf5 let
\f0\b0 \cf4  options: [\cf8 ProjectType\cf4 ] = [.\cf11 Gallery\cf4 , .\cf11 Photo\cf4 , .\cf11 Text\cf4 ]\
        \cf11 dDDelegate\cf4 .\cf15 dropDownItemPressed\cf4 (selectedOption: options[indexPath.\cf12 row\cf4 ])\
    \}\
    \
\}\
\
\
\
\
\cf2 //MARK:
\f1\b \cf16  - DropDown Delegate Extension
\f0\b0 \cf4 \

\f1\b \cf5 extension
\f0\b0 \cf4  \cf17 MainViewController\cf4 : \cf9 dropDownDelegate\cf4  \{\
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 dropDownItemPressed\cf4 (selectedOption: \cf8 ProjectType\cf4 ) \{\
        \cf14 print\cf4 (selectedOption)\
        \cf15 hideDropDown\cf4 ()\
        
\f1\b \cf5 if
\f0\b0 \cf4  selectedOption \cf15 ==\cf4  .\cf11 Gallery\cf4  \{\
            \cf15 selectImageFromGallery\cf4 ()\
        \} 
\f1\b \cf5 else
\f0\b0 \cf4  
\f1\b \cf5 if
\f0\b0 \cf4  selectedOption \cf15 ==\cf4  .\cf11 Photo\cf4  \{\
            \cf15 takeImageWithCamera\cf4 ()\
        \} 
\f1\b \cf5 else
\f0\b0 \cf4  \{\
            \cf15 goToAddProjectView\cf4 (image: 
\f1\b \cf5 nil
\f0\b0 \cf4 )\
        \}\
    \}\
\}\
\
\cf2 //MARK:
\f1\b \cf16  - ImagePicker Delegate Extension
\f0\b0 \cf4 \

\f1\b \cf5 extension
\f0\b0 \cf4  \cf17 MainViewController\cf4 : \cf10 UIImagePickerControllerDelegate\cf4 , \cf10 UINavigationControllerDelegate\cf4  \{\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 imagePickerController\cf4 (
\f1\b \cf5 _
\f0\b0 \cf4  picker: \cf9 UIImagePickerController\cf4 , didFinishPickingMediaWithInfo info: [\cf9 UIImagePickerController\cf4 .\cf10 InfoKey\cf4  : 
\f1\b \cf5 Any
\f0\b0 \cf4 ]) \{\
        \
        
\f1\b \cf5 if
\f0\b0 \cf4  
\f1\b \cf5 let
\f0\b0 \cf4  image = info[\cf9 UIImagePickerController\cf4 .\cf10 InfoKey\cf4 (rawValue: \cf18 "UIImagePickerControllerEditedImage"\cf4 )] 
\f1\b \cf5 as
\f0\b0 \cf4 ? \cf9 UIImage\cf4  \{\
            \cf15 goToAddProjectView\cf4 (image: image)\
        \}\
        \
        picker.\cf14 dismiss\cf4 (animated: 
\f1\b \cf5 true
\f0\b0 \cf4 , completion: 
\f1\b \cf5 nil
\f0\b0 \cf4 )\
    \}\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 imagePickerControllerDidCancel\cf4 (
\f1\b \cf5 _
\f0\b0 \cf4  picker: \cf9 UIImagePickerController\cf4 ) \{\
        picker.\cf14 dismiss\cf4 (animated: 
\f1\b \cf5 true
\f0\b0 \cf4 , completion: 
\f1\b \cf5 nil
\f0\b0 \cf4 )\
    \}\
\}\
\
//TABLE VIEW \
\cf2 // Table View\cf4 \
        \cf11 tableView\cf4  = \cf9 UITableView\cf4 (frame: \cf10 CGRect\cf4 (x: \cf13 30\cf4 , y: \cf13 30\cf4 , width: \cf13 300\cf4 , height: \cf13 130\cf4 ))\
        \cf11 tableView\cf4 .\cf12 delegate\cf4  = 
\f1\b \cf5 self
\f0\b0 \cf4 \
        \cf11 tableView\cf4 .\cf12 dataSource\cf4  = 
\f1\b \cf5 self
\f0\b0 \cf4 \
        \cf11 tableView\cf4 .\cf12 backgroundColor\cf4  = \cf9 UIColor\cf4 .\cf12 lightGray\cf4 \
        \cf11 tableView\cf4 .\cf12 isScrollEnabled\cf4  = 
\f1\b \cf5 false
\f0\b0 \cf4 \
        \cf11 tableView\cf4 .\cf12 layer\cf4 .\cf12 cornerRadius\cf4  = \cf13 15\
\
\cf2 //MARK:
\f1\b \cf16  - TV DataSource Extension
\f0\b0 \cf4 \

\f1\b \cf5 extension
\f0\b0 \cf4  \cf17 AddProjectViewController\cf4 : \cf10 UITableViewDataSource\cf4  \{\
\
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 tableView\cf4 (
\f1\b \cf5 _
\f0\b0 \cf4  tableView: \cf9 UITableView\cf4 , numberOfRowsInSection section: \cf10 Int\cf4 ) -> \cf10 Int\cf4  \{\
        
\f1\b \cf5 return
\f0\b0 \cf4  \cf11 tableViewOptions\cf4 .\cf12 count\cf4 \
    \}\
    \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 tableView\cf4 (
\f1\b \cf5 _
\f0\b0 \cf4  tableView: \cf9 UITableView\cf4 , cellForRowAt indexPath: \cf10 IndexPath\cf4 ) -> \cf9 UITableViewCell\cf4  \{\
        
\f1\b \cf5 let
\f0\b0 \cf4  cell = \cf9 UITableViewCell\cf4 ()\
                        \
        cell.\cf12 imageView\cf4 ?.\cf12 image\cf4  = \cf11 tableViewOptions\cf4 [indexPath.\cf12 row\cf4 ].\cf13 0\cf4 \
        cell.\cf12 textLabel\cf4 ?.\cf12 text\cf4  = \cf11 tableViewOptions\cf4 [indexPath.\cf12 row\cf4 ].\cf13 1\cf4 \
        cell.\cf12 textLabel\cf4 ?.\cf12 textColor\cf4  = \cf9 UIColor\cf4 .\cf12 systemBlue\cf4 \
        cell.\cf12 backgroundColor\cf4  = \cf9 UIColor\cf4 .\cf12 lightGray\cf4 \
        \
        
\f1\b \cf5 return
\f0\b0 \cf4  cell\
    \}\
\}\
\
\
/////// PKCanvasView Options\

\f1\b \cf5 let
\f0\b0 \cf4  canvasScale = \cf11 canvasView\cf4 .\cf12 bounds\cf4 .\cf12 width\cf4  \cf14 /\cf4  \cf11 canvasWidth\cf4 \
        \cf11 canvasView\cf4 .\cf12 minimumZoomScale\cf4  = canvasScale\
        \cf11 canvasView\cf4 .\cf12 maximumZoomScale\cf4  = canvasScale\
        \cf11 canvasView\cf4 .\cf12 zoomScale\cf4  = canvasScale\
        \
        \cf11 canvasView\cf4 .\cf12 contentOffset\cf4  = \cf10 CGPoint\cf4 (x: \cf13 0\cf4 , y: \cf14 -\cf11 canvasView\cf4 .\cf12 adjustedContentInset\cf4 .\cf12 top\cf4 )\
        \cf15 updateContentSizeForDrawing\cf4 ()\
\

\f1\b \cf5 func
\f0\b0 \cf4  \cf7 canvasViewDrawingDidChange\cf4 (
\f1\b \cf5 _
\f0\b0 \cf4  canvasView: \cf9 PKCanvasView\cf4 ) \{\
        \cf2 // update letter drawings\cf4 \
        \cf15 updateContentSizeForDrawing\cf4 ()\
    \}\
        \
    
\f1\b \cf5 func
\f0\b0 \cf4  \cf7 updateContentSizeForDrawing\cf4 () \{\
        
\f1\b \cf5 let
\f0\b0 \cf4  drawing = \cf11 canvasView\cf4 .\cf12 drawing\cf4 \
        
\f1\b \cf5 let
\f0\b0 \cf4  contentHeight: \cf10 CGFloat\cf4 \
        \
        
\f1\b \cf5 if
\f0\b0 \cf4  \cf14 !\cf4 drawing.\cf12 bounds\cf4 .\cf12 isNull\cf4  \{\
            contentHeight = \cf14 max\cf4 (\cf11 canvasView\cf4 .\cf12 bounds\cf4 .\cf12 height\cf4 , (drawing.\cf12 bounds\cf4 .\cf12 maxY\cf4  \cf14 +\cf4  
\f1\b \cf5 self
\f0\b0 \cf4 .\cf11 canvasHeight\cf4 ) \cf14 *\cf4  \cf11 canvasView\cf4 .\cf12 zoomScale\cf4 )\
        \} 
\f1\b \cf5 else
\f0\b0 \cf4  \{\
            contentHeight = \cf11 canvasView\cf4 .\cf12 bounds\cf4 .\cf12 height\cf4 \
        \}\
        \
        \cf11 canvasView\cf4 .\cf12 contentSize\cf4  = \cf10 CGSize\cf4 (width: \cf11 canvasWidth\cf4  \cf14 *\cf4  \cf11 canvasView\cf4 .\cf12 zoomScale\cf4 , height: contentHeight)\
    \}\
}